#version 450 core

#include "globalubos.glsl"
#include "utils.glsl"
#define LIGHTCACHEMODE LIGHTCACHEMODE_LIGHT
#include "lightcache.glsl"
#include "lightingfunctions.glsl"

layout(binding=0) uniform sampler2DShadow ShadowMap;

layout (local_size_x = LIGHTING_THREADS_PER_GROUP, local_size_y = 1, local_size_z = 1) in;
void main()
{
	if(gl_GlobalInvocationID.x >= TotalLightCacheCount)
		return;


	vec3 worldPosition = LightCacheEntries[gl_GlobalInvocationID.x].Position;

	// Shadow mapping
	vec4 shadowProjection = vec4(worldPosition, 1.0) * LightViewProjection;
	shadowProjection.xy = shadowProjection.xy * 0.5 + vec2(0.5 * shadowProjection.w);
	shadowProjection.z += ShadowBias;
	float shadowing = textureProjLod(ShadowMap, shadowProjection, 0);

	// Direction and distance to light.
	vec3 toLight = LightPosition - worldPosition;
	float lightDistanceSq = dot(toLight, toLight);
	toLight *= inversesqrt(lightDistanceSq);

	// Direction to camera.
	vec3 toCamera = normalize(vec3(CameraPosition - worldPosition));
	
	// Evaluate direct light.
	vec3 scaledIntensity = LightIntensity * (shadowing * ComputeSpotFalloff(toLight) / lightDistanceSq);

	// -----------------------------------------------
	// IRRADIANCE VIA SH (test)

	// Analytical clamped cosine lobe transformation into SH basis
	// Derivation: Assume light direction = z-axis, then rotate resulting zonal harmonics

	const float factor0 = sqrt(PI) / 2.0;
	const float factor1 = sqrt(PI / 3.0);

	vec3 SH00 = factor0 * scaledIntensity;
	vec3 SH1neg1 = -(factor1 * toLight.y) * scaledIntensity;
	vec3 SH10 = (factor1 * toLight.z) * scaledIntensity;
	vec3 SH1pos1 = -(factor1 * toLight.x) * scaledIntensity;

	// TODO: Don't know the rotation of the second zonal harmonic
	// cosine lobe second band zonal is sqrt(5*PI)/8 according to https://d3cw3dd2w32x2b.cloudfront.net/wp-content/uploads/2011/06/10-14.pdf
	/*vec3 SH2neg2 = 
	vec3 SH2neg1 = 
	vec3 SH20 = 
	vec3 SH2pos1 = 
	vec3 SH2pos2 =*/
	
	

	// Save to buffer.
	LightCacheEntries[gl_GlobalInvocationID.x].SH1neg1 = SH1neg1;
	LightCacheEntries[gl_GlobalInvocationID.x].SH00_r = SH00.r;
	LightCacheEntries[gl_GlobalInvocationID.x].SH10 = SH10;
	LightCacheEntries[gl_GlobalInvocationID.x].SH00_g = SH00.g;
	LightCacheEntries[gl_GlobalInvocationID.x].SH1pos1 = SH1pos1;
	LightCacheEntries[gl_GlobalInvocationID.x].SH00_b = SH00.b;
}