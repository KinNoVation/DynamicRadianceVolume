#version 450 core

#include "globalubos.glsl"
#include "utils.glsl"
#define LIGHTCACHEMODE LIGHTCACHEMODE_LIGHT
#include "lightcache.glsl"
#include "lightingfunctions.glsl"

layout(binding=0) uniform sampler2DShadow ShadowMap;

layout (local_size_x = LIGHTING_THREADS_PER_GROUP, local_size_y = 1, local_size_z = 1) in;
void main()
{
	if(gl_GlobalInvocationID.x >= TotalLightCacheCount)
		return;


	vec3 worldPosition = LightCacheEntries[gl_GlobalInvocationID.x].Position;

	// Shadow mapping
	vec4 shadowProjection = vec4(worldPosition, 1.0) * LightViewProjection;
	shadowProjection.xy = shadowProjection.xy * 0.5 + vec2(0.5 * shadowProjection.w);
	shadowProjection.z += ShadowBias;
	float shadowing = textureProjLod(ShadowMap, shadowProjection, 0);

	// Direction and distance to light.
	vec3 toLight = LightPosition - worldPosition;
	float lightDistanceSq = dot(toLight, toLight);
	toLight *= inversesqrt(lightDistanceSq);

	// Direction to camera.
	vec3 toCamera = normalize(vec3(CameraPosition - worldPosition));
	
	// Evaluate direct light.
	vec3 scaledIntensity = LightIntensity * (shadowing * ComputeSpotFalloff(toLight) / lightDistanceSq);


	// Diffuse
/*	const float factor0 = sqrt(PI) / 2.0;
	const float factor1 = sqrt(PI / 3.0);
	vec3 SH00 = factor0 * scaledIntensity;
	vec3 SH1neg1 = -(factor1 * toLight.y) * scaledIntensity;
	vec3 SH10 = (factor1 * toLight.z) * scaledIntensity;
	vec3 SH1pos1 = -(factor1 * toLight.x) * scaledIntensity;


	// Specular
	vec3 halfVector = normalize(toCamera + toLight);

	const float specFactor0 = sqrt(PI);
	const float specFactor1 = sqrt(3*PI);
	vec3 spec_SH00 = specFactor0 * scaledIntensity;
	vec3 spec_SH1neg1 = -(specFactor1 * halfVector.y) * scaledIntensity;
	vec3 spec_SH10 = (specFactor1 * halfVector.z) * scaledIntensity;
	vec3 spec_SH1pos1 = -(specFactor1 * halfVector.x) * scaledIntensity;


	const float specFactor2 = sqrt(15.0 * PI) / 2.0;
	const float specFactor3 = sqrt(5.0 * PI) / 4.0;
	vec3 spec_SH2neg2 = (specFactor2 * halfVector.x * halfVector.y) * scaledIntensity;
	vec3 spec_SH2neg1 = -(specFactor2 * halfVector.y * halfVector.z) * scaledIntensity;
	vec3 spec_SH20 = (specFactor3 * (halfVector.z * halfVector.z * 3.0 - 1.0)) * scaledIntensity;
	vec3 spec_SH2pos1 = -(specFactor2 * halfVector.x * halfVector.z) * scaledIntensity;
	vec3 spec_SH2pos2 = (specFactor2 * (halfVector.x * halfVector.x - halfVector.y * halfVector.y)) * scaledIntensity; 


	// Save to buffer.
	LightCacheEntries[gl_GlobalInvocationID.x].SH1neg1 = SH1neg1;
	LightCacheEntries[gl_GlobalInvocationID.x].SH00_r = SH00.r;
	LightCacheEntries[gl_GlobalInvocationID.x].SH10 = SH10;
	LightCacheEntries[gl_GlobalInvocationID.x].SH00_g = SH00.g;
	LightCacheEntries[gl_GlobalInvocationID.x].SH1pos1 = SH1pos1;
	LightCacheEntries[gl_GlobalInvocationID.x].SH00_b = SH00.b;

	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH1neg1 = spec_SH1neg1;
	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH00_r = spec_SH00.r;
	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH10 = spec_SH10;
	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH00_g = spec_SH00.g;
	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH1pos1 = spec_SH1pos1;
	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH00_b = spec_SH00.b;

	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH2neg2 = spec_SH2neg2;
	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH20_r = spec_SH20.r;
	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH2neg1 = spec_SH2neg1;
	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH20_g = spec_SH20.g;
	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH2pos1 = spec_SH2pos1;
	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH20_b = spec_SH20.b;
	LightCacheEntries[gl_GlobalInvocationID.x].spec_SH2pos2 = spec_SH2pos2; */
};
